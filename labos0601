#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define MAX_BUFFER 1024

void komanda1(int write_fd) {
    char buffer[MAX_BUFFER];
    // Читање на текст од тастатура
    printf("Komanda1: Внесете текст (Ctrl+D за крај):\n");
    while (fgets(buffer, MAX_BUFFER, stdin)) {
        // Запишување на текстот во pipe
        write(write_fd, buffer, strlen(buffer));
    }
    close(write_fd);  // Затвори го write_fd кога ќе заврши
}

void komanda2(int read_fd, int write_fd) {
    char buffer[MAX_BUFFER];
    ssize_t n;
    // Читање од левиот pipe и пренос во десниот pipe
    while ((n = read(read_fd, buffer, MAX_BUFFER)) > 0) {
        write(write_fd, buffer, n);
    }
    close(read_fd);
    close(write_fd);  // Затвори го write_fd кога ќе заврши
}

void komanda3(int read_fd) {
    char buffer[MAX_BUFFER];
    ssize_t n;
    int space_count = 0;
    
    // Читање од десниот pipe
    while ((n = read(read_fd, buffer, MAX_BUFFER)) > 0) {
        for (int i = 0; i < n; i++) {
            if (buffer[i] == ' ') {
                space_count++;
            }
        }
    }
    
    // Печатење на бројот на празни места
    printf("Komanda3: Број на празни места: %d\n", space_count);
    close(read_fd);  // Затвори го read_fd кога ќе заврши
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Правилна употреба: %s <команда број>\n", argv[0]);
        exit(1);
    }

    int pipe1[2], pipe2[2];
    pid_t pid1, pid2, pid3;

    // Создавање на два pipe
    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("pipe error");
        exit(1);
    }

    // Проверка на која команда треба да се изврши
    int command_num = atoi(argv[1]);

    switch (command_num) {
        case 1:
            // Komanda1
            pid1 = fork();
            if (pid1 == 0) {
                // Процес за Komanda1
                close(pipe1[0]);  // Затвори го ненужниот read pipe
                komanda1(pipe1[1]);
                exit(0);
            }
            break;
        
        case 2:
            // Komanda2
            pid2 = fork();
            if (pid2 == 0) {
                // Процес за Komanda2
                close(pipe1[1]);  // Затвори го ненужниот write pipe
                close(pipe2[0]);  // Затвори го ненужниот read pipe
                komanda2(pipe1[0], pipe2[1]);
                exit(0);
            }
            break;

        case 3:
            // Komanda3
            pid3 = fork();
            if (pid3 == 0) {
                // Процес за Komanda3
                close(pipe2[1]);  // Затвори го ненужниот write pipe
                komanda3(pipe2[0]);
                exit(0);
            }
            break;

        default:
            fprintf(stderr, "Неважечка команда број: %d\n", command_num);
            exit(1);
    }

    // Чекање на сите процеси да завршат
    if (pid1 > 0) wait(NULL);
    if (pid2 > 0) wait(NULL);
    if (pid3 > 0) wait(NULL);

    return 0;
}
Објаснување на програмата
pipe1 и pipe2: Два PIPE-а се креираат. Првиот PIPE ќе го користи Komanda1 за да го испрати текстот во вториот PIPE, кој ќе го користи Komanda2 за да го пренесе понатаму.

Задачи за секој процес:

Komanda1: Чита од тастатурата и го запишува во првиот PIPE.
Komanda2: Пренесува податоци од првиот PIPE во вториот PIPE.
Komanda3: Чита од вториот PIPE и брои бројот на празни места во текстот.
Почеток на процесите: За секоја команда се креира посебен процес користејќи fork().

Во секој процес, се затвораат ненужните краеви на PIPE (read или write), бидејќи секој процес ќе ги користи само потребните краеви.
Чекање на завршување: Главниот процес чека сите дечиња процеси да завршат со помош на wait().
